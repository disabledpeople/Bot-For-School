import logging
from datetime import datetime
from apscheduler.schedulers.background import BackgroundScheduler
from utils import load_json
from conf import DAYS_RU
DEJUR_FILE = 'json/dejur.json'
USERS_FILE = 'json/users.json'

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def get_user_class(user_id):
    users = load_json(USERS_FILE)
    return users.get(str(user_id), {}).get("class")

# --- –ü–æ–∏—Å–∫ –¥–µ–∂—É—Ä–Ω—ã—Ö –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ---
def find_duty_by_day_for_class(user_class):
    duty_data = load_json(DEJUR_FILE)
    current_weekday = datetime.now().strftime('%A')
    current_weekday_ru = DAYS_RU.get(current_weekday, current_weekday)

    for duty in duty_data:
        if duty['day'] == current_weekday:
            duties = duty.get(str(user_class), [f"–î–µ–∂—É—Ä–Ω—ã–µ –¥–ª—è {user_class} –∫–ª–∞—Å—Å–∞ –Ω–µ —É–∫–∞–∑–∞–Ω—ã."])
            return current_weekday_ru, duties

    return current_weekday_ru, ["–î–µ–∂—É—Ä–Ω—ã–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."]

# --- –ü–æ–∏—Å–∫ –¥–µ–∂—É—Ä–Ω—ã—Ö –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é ---
def find_duty_for_week_by_class(user_class):
    duty_data = load_json(DEJUR_FILE)
    result = []

    for duty in duty_data:
        day_en = duty.get('day', 'Unknown')
        day_ru = DAYS_RU.get(day_en, day_en)
        duties = duty.get(str(user_class), [f"–î–µ–∂—É—Ä–Ω—ã–µ –¥–ª—è {user_class} –∫–ª–∞—Å—Å–∞ –Ω–µ —É–∫–∞–∑–∞–Ω—ã"])
        duties_str = ", ".join(duties)
        result.append(f"*{day_ru}*: {duties_str}")

    return result

# --- –ö–æ–º–∞–Ω–¥–∞ /duty ---
def handle_duty(bot, message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /duty –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}")
    user_class = get_user_class(message.chat.id)

    if not user_class:
        bot.send_message(message.chat.id, "‚ùå –í–∞—à –∫–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return

    weekday_ru, duty_list = find_duty_by_day_for_class(user_class)
    bot.send_chat_action(message.chat.id, 'typing')
    bot.send_message(
        message.chat.id,
        f"üëÆ –°–µ–≥–æ–¥–Ω—è *{weekday_ru}*, –≤ {user_class} –∫–ª–∞—Å—Å–µ –¥–µ–∂—É—Ä—è—Ç:\n" + ", ".join(duty_list),
        parse_mode='Markdown'
    )

# --- –ö–æ–º–∞–Ω–¥–∞ /duty_week ---
def handle_duty_week(bot, message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /duty_week –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}")
    user_class = get_user_class(message.chat.id)

    if not user_class:
        bot.send_message(message.chat.id, "‚ùå –í–∞—à –∫–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return

    duty_week_list = find_duty_for_week_by_class(user_class)
    bot.send_chat_action(message.chat.id, 'typing')
    message_text = f"üìã *–î–µ–∂—É—Ä–Ω—ã–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è {user_class} –∫–ª–∞—Å—Å–∞:*\n\n" + "\n".join(duty_week_list)
    bot.send_message(message.chat.id, message_text, parse_mode='Markdown')

# --- –†–∞—Å—Å—ã–ª–∫–∞ –¥–µ–∂—É—Ä—Å—Ç–≤ —É—Ç—Ä–æ–º ---
def send_daily_duty(bot):
    users = load_json(USERS_FILE)
    duty_data = load_json(DEJUR_FILE)

    current_weekday = datetime.now().strftime('%A')
    current_weekday_ru = DAYS_RU.get(current_weekday, current_weekday)

    if current_weekday in ['Saturday', 'Sunday']:
        logging.info(f"–í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å ({current_weekday_ru}), —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.")
        return

    for duty in duty_data:
        if duty['day'] == current_weekday:
            for user_id_str, user_info in users.items():
                user_class = user_info.get("class")
                duties = duty.get(str(user_class))

                if duties:
                    message = f"üîî –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n\n–°–µ–≥–æ–¥–Ω—è ({current_weekday_ru}) –≤ {user_class} –∫–ª–∞—Å—Å–µ –¥–µ–∂—É—Ä—è—Ç:\n" + ", ".join(duties)
                else:
                    message = f"–°–µ–≥–æ–¥–Ω—è ({current_weekday_ru}) —É {user_class} –∫–ª–∞—Å—Å–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –¥–µ–∂—É—Ä–Ω—ã—Ö."

                try:
                    bot.send_message(int(user_id_str), message)
                    logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id_str}")
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_str}: {e}")
            break


def setup_scheduler(bot):
    scheduler = BackgroundScheduler()
    scheduler.add_job(send_daily_duty, 'cron', hour=8, minute=0, args=[bot])
    scheduler.start()
    return scheduler
