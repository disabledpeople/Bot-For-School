import logging
from datetime import datetime
import time
from utils import load_json, save_json, load_users, load_feedback_users, save_feedback_users
from conf import ADMIN_ID

# --- –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º ---
USERS_FILE = 'json/users.json'
STATS_FILE = 'json/daily_stats.json'

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
def get_total_users():
    users = load_json(USERS_FILE)
    total = len(users)
    logging.debug(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}")
    return total

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
def load_or_init_stats():
    stats = load_json(STATS_FILE)
    today = datetime.now().strftime('%Y-%m-%d')

    if not stats or stats.get("date") != today:
        logging.info("–°–æ–∑–¥–∞—é –Ω–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
        stats = {
            "date": today,
            "total_users": get_total_users(),
            "total_requests": 0,
            "schedule_today_requests": 0,
            "schedule_tomorrow_requests": 0,
            "schedule_week_requests": 0,
            "holiday_requests": 0,
            "food_requests": 0,
            "ege_schedule_requests": 0,
            "oge_schedule_requests": 0,
            "teachers_requests": 0,
            "important_numbers_requests": 0,
            "duty_requests": 0,
            "duty_week_requests": 0,
            "anon_feedback": 0,
            "feedback": 0,
            "profile": 0,
            "tops": 0
        }
        save_json(STATS_FILE, stats)
        logging.info("–ù–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    else:
        logging.debug("–ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
    return stats

# --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã ---
def increment_daily_stat(command_key):
    logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: –∫–æ–º–∞–Ω–¥–∞ {command_key}")
    stats = load_or_init_stats()
    stats["total_requests"] = stats.get("total_requests", 0) + 1
    if command_key in stats:
        stats[command_key] += 1
        logging.info(f"–£–≤–µ–ª–∏—á–µ–Ω —Å—á—ë—Ç—á–∏–∫ –¥–ª—è {command_key}: {stats[command_key]}")
    else:
        logging.warning(f"–ö–ª—é—á —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ '{command_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
    stats["total_users"] = get_total_users()
    save_json(STATS_FILE, stats)
    logging.debug("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")

# --- –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /stats) ---
def handle_stats(bot, message):
    logging.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
    stats = load_or_init_stats()
    text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {stats['date']}:\n\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}\n\n"
        f"–ó–∞–ø—Ä–æ—Å—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è: {stats['schedule_today_requests']}\n"
        f"–ó–∞–ø—Ä–æ—Å—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–≤—Ç—Ä–∞: {stats['schedule_tomorrow_requests']}\n"
        f"–ó–∞–ø—Ä–æ—Å—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é: {stats['schedule_week_requests']}\n"
        f"–ó–∞–ø—Ä–æ—Å—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∏–∫—É–ª–∞—Ö: {stats['holiday_requests']}\n"
        f"–ó–∞–ø—Ä–æ—Å—ã –º–µ–Ω—é: {stats['food_requests']}\n"
        f"–ó–∞–ø—Ä–æ—Å—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ï–ì–≠: {stats['ege_schedule_requests']}\n"
        f"–ó–∞–ø—Ä–æ—Å—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –û–ì–≠: {stats['oge_schedule_requests']}\n"
        f"–ó–∞–ø—Ä–æ—Å—ã —Å–ø–∏—Å–∫–∞ —É—á–∏—Ç–µ–ª–µ–π: {stats['teachers_requests']}\n"
        f"–ó–∞–ø—Ä–æ—Å—ã –≤–∞–∂–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: {stats['important_numbers_requests']}\n"
        f"–ó–∞–ø—Ä–æ—Å—ã –¥–µ–∂—É—Ä–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats['duty_requests']}\n"
        f"–ó–∞–ø—Ä–æ—Å—ã –¥–µ–∂—É—Ä–Ω—ã—Ö –Ω–∞ –Ω–µ–¥–µ–ª—é: {stats['duty_week_requests']}\n"
        f"–ó–∞–ø—Ä–æ—Å—ã –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –∂–∞–ª–æ–±: {stats['anon_feedback']}\n"
        f"–ó–∞–ø—Ä–æ—Å—ã –∂–∞–ª–æ–±: {stats['feedback']}\n"
        f"–ó–∞–ø—Ä–æ—Å—ã –ø—Ä–æ—Ñ–∏–ª—å: {stats['profile']}\n"
        f"–ó–∞–ø—Ä–æ—Å—ã —Ç–æ–ø—ã: {stats['tops']}"
    )
    bot.send_message(message.chat.id, text)
    logging.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")

def cmd_get_users(bot, message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    users = load_users()
    if not users:
        logging.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ /get_users")
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    classes = {}
    for uid, data in users.items():
        cls = data.get('class', '–Ω–µ —É–∫–∞–∑–∞–Ω')
        classes.setdefault(cls, []).append(uid)

    def sort_key(x):
        try:
            return int(x)
        except ValueError:
            return 9999

    sorted_classes = sorted(classes.keys(), key=sort_key)
    result_lines = []
    for cls in sorted_classes:
        result_lines.append(f"–ö–ª–∞—Å—Å {cls}:")
        for uid in classes[cls]:
            result_lines.append(f"  ID: {uid}")
        result_lines.append("")

    msg = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–ª–∞—Å—Å–∞–º:\n\n" + "\n".join(result_lines)
    bot.send_message(message.chat.id, msg)
    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")

def cmd_set_class(bot, message, user_id, user_class):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—ã—Ç–∞–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∞—Å—Å {user_class} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    users = load_json(USERS_FILE)
    if str(user_id) in users:
        users[str(user_id)]["class"] = user_class
    else:
        users[str(user_id)] = {"class": user_class}
    save_json(USERS_FILE, users)
    bot.send_message(message.chat.id, f"‚úÖ –ö–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {user_class}.")
    logging.info(f"–ö–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {user_class}")

def handle_set_class(bot, message):
    args = message.text.split()
    if len(args) != 3:
        logging.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã /set_class –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")
        bot.send_message(message.chat.id, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_class <user_id> <–∫–ª–∞—Å—Å>")
        return
    user_id = args[1]
    user_class = args[2]
    cmd_set_class(bot, message, user_id, user_class)

def cmd_del_user(bot, message, user_id):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—ã—Ç–∞–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    users = load_json(USERS_FILE)
    if str(user_id) in users:
        users.pop(str(user_id))
        save_json(USERS_FILE, users)
        bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω")
    else:
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        bot.send_message(message.chat.id, f"‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

def handle_del_user(bot, message):
    args = message.text.split()
    if len(args) != 2:
        logging.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã /del_user –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")
        bot.send_message(message.chat.id, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /del_user <user_id>")
        return
    user_id = args[1]
    cmd_del_user(bot, message, user_id)

def handle_announcement(bot, message, admin_ids):
    user_id = message.from_user.id
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫—É")

    if user_id not in admin_ids:
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ")
        bot.send_message(message.chat.id, "‚ùå —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    text = message.text.partition(' ')[2].strip()
    if not text:
        bot.send_message(message.chat.id, "‚ùó –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ /new")
        return

    users = load_users()
    if not users:
        logging.warning("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç, —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        bot.send_message(message.chat.id, "‚ö† —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return

    bot.send_message(message.chat.id, f"üöÄ –Ω–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")
    success, failed = 0, 0

    for uid in users.keys():
        try:
            bot.send_message(int(uid), text, parse_mode="Markdown")
            success += 1
            logging.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {uid}")
        except Exception as e:
            failed += 1
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
        time.sleep(0.1)

    bot.send_message(message.chat.id, f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–£—Å–ø–µ—à–Ω–æ: {success}, –æ—à–∏–±–æ–∫: {failed}")
    logging.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {success} —É—Å–ø–µ—à–Ω–æ, {failed} —Å –æ—à–∏–±–∫–∞–º–∏")

# –∑–∞–≥—Ä—É–∂–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤ —Ä–µ–∂–∏–º–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
feedback_users = load_feedback_users()

def handle_feedback_start(bot, message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name or "Unknown"
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({user_name}) –Ω–∞—á–∞–ª –æ—Ç–ø—Ä–∞–≤–∫—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")
    bot.send_message(user_id, "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é.")
    feedback_users.add(user_id)
    save_feedback_users(feedback_users)
    logging.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ feedback_users")

def handle_feedback_receive(bot, message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name or "Unknown"

    if user_id not in feedback_users:
        logging.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –≤ —Å–ø–∏—Å–∫–µ feedback_users")
        return

    feedback_text = message.text
    if not feedback_text:
        bot.send_message(user_id, "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é.")
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")
        return

    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({user_name}): {feedback_text}")

    feedback_users.remove(user_id)
    save_feedback_users(feedback_users)
    logging.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ feedback_users")

    for admin_id in ADMIN_ID:
        try:
            bot.send_message(admin_id, f"üì© –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç {user_id} ({user_name}):\n\n{feedback_text}")
            logging.info(f"–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

    bot.send_message(user_id, "—Å–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –º—ã –µ—ë –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º.")
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏")
