from datetime import datetime
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, Message
from utils import load_users, save_users
from datetime import datetime, timedelta
import logging

# --- –ö–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è ---
def profile_buttons():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("‚úèÔ∏è –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è"), KeyboardButton("üè∑ –∏–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å"))
    kb.add(KeyboardButton("üåü –∏–∑–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä"))
    return kb

# --- –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å ---
def show_profile(bot, message):
    user_id = str(message.from_user.id)
    users = load_users()
    user = users.get(user_id)

    if not user:
        logging.warning(f"show_profile: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        bot.send_message(message.chat.id, "–≤—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    avatar = user.get('avatar', 'üôÇ')
    name = user.get('name', message.from_user.first_name or '–±–µ–∑ –∏–º–µ–Ω–∏')
    user_class = user.get('class', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    reg_date = user.get('registered_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    last_seen = user.get('last_active', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

    profile_text = (
        f"{avatar} <b>–≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
        f"<b>–∏–º—è:</b> {name}\n"
        f"<b>–∫–ª–∞—Å—Å:</b> {user_class}\n"
        f"<b>telegram ID:</b> {user_id}\n"
        f"<b>–¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {reg_date}\n"
        f"<b>–ø–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {last_seen}"
    )

    logging.info(f"show_profile: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    bot.send_message(user_id, profile_text, reply_markup=profile_buttons(), parse_mode='HTML')

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ ---
def handle_change_name(bot, message):
    logging.info(f"handle_change_name: –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    msg = bot.send_message(message.chat.id, "–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
    bot.register_next_step_handler(msg, lambda m: save_new_name(bot, m))

def save_new_name(bot, message):
    user_id = str(message.from_user.id)
    new_name = message.text.strip()

    users = load_users()
    user = users.get(user_id, {})
    user['name'] = new_name
    user['last_active'] = datetime.now().strftime("%Y-%m-%d %H:%M")
    users[user_id] = user

    save_users(users)
    logging.info(f"save_new_name: –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '{new_name}'")
    bot.send_message(
        message.chat.id,
        f"*–ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ:* _{new_name}_",
        parse_mode='Markdown'
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞ ---
def handle_change_class(bot, message):
    logging.info(f"handle_change_class: –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    msg = bot.send_message(message.chat.id, "–≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª–∞—Å—Å (–¥–æ—Å—Ç—É–ø–Ω—ã: 8, 9, 10, 11):")
    bot.register_next_step_handler(msg, lambda m: save_new_class(bot, m))

def save_new_class(bot, message):
    user_id = str(message.from_user.id)
    new_class = message.text.strip()

    if new_class not in ['8', '9', '10', '11']:
        logging.warning(f"save_new_class: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤—ë–ª –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–ª–∞—Å—Å '{new_class}'")
        bot.send_message(
            message.chat.id,
            "‚ùå *–û—à–∏–±–∫–∞:* –¥–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ –∫–ª–∞—Å—Å—ã *8*, *9*, *10* –∏–ª–∏ *11*. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode='Markdown'
        )
        return handle_change_class(bot, message)  # –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å

    users = load_users()
    user = users.get(user_id, {})
    user['class'] = new_class
    user['last_active'] = datetime.now().strftime("%Y-%m-%d %H:%M")
    users[user_id] = user

    save_users(users)
    logging.info(f"save_new_class: –∫–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '{new_class}'")
    bot.send_message(
        message.chat.id,
        f"*–ö–ª–∞—Å—Å –æ–±–Ω–æ–≤–ª—ë–Ω:* _{new_class}_",
        parse_mode='Markdown'
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ ---
def handle_change_avatar(bot, message):
    logging.info(f"handle_change_avatar: –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    msg = bot.send_message(message.chat.id, "–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä (—ç–º–æ–¥–∑–∏, –º–∞–∫—Å–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞):")
    bot.register_next_step_handler(msg, lambda m: save_new_avatar(bot, m))

def save_new_avatar(bot, message):
    user_id = str(message.from_user.id)
    new_avatar = message.text.strip()

    if len(new_avatar) > 2:
        logging.warning(f"save_new_avatar: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤—ë–ª —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∞–≤–∞—Ç–∞—Ä '{new_avatar}'")
        bot.send_message(
            message.chat.id,
            "‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∞–≤–∞—Ç–∞—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞–∫—Å–∏–º—É–º *2* —Å–∏–º–≤–æ–ª–∞.",
            parse_mode='Markdown'
        )
        return

    users = load_users()
    user = users.get(user_id, {})
    user['avatar'] = new_avatar
    user['last_active'] = datetime.now().strftime("%Y-%m-%d %H:%M")
    users[user_id] = user

    save_users(users)
    logging.info(f"save_new_avatar: –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '{new_avatar}'")
    bot.send_message(
        message.chat.id,
        f"*–ê–≤–∞—Ç–∞—Ä –æ–±–Ω–æ–≤–ª—ë–Ω:* {new_avatar}",
        parse_mode='Markdown'
    )

def add_score(user_id: str):
    users = load_users()
    user = users.get(user_id, {})
    
    now = datetime.now()

    last_score_time_str = user.get('last_score_time')
    if last_score_time_str:
        try:
            last_score_time = datetime.strptime(last_score_time_str, "%Y-%m-%d %H:%M:%S")
            if now < last_score_time + timedelta(minutes=10):
                logging.info(f"add_score: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ cooldown, –±–∞–ª–ª—ã –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã")
                return False
        except Exception as e:
            logging.error(f"add_score: –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    # –Ω–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª
    user['score'] = user.get('score', 0) + 1
    user['last_score_time'] = now.strftime("%Y-%m-%d %H:%M:%S")
    user['last_active'] = now.strftime("%Y-%m-%d %H:%M")
    
    users[user_id] = user
    save_users(users)
    logging.info(f"add_score: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–∞—á–∏—Å–ª–µ–Ω –±–∞–ª–ª. –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: {user['score']}")
    return True

def safe_dt(date_str, fmt="%Y-%m-%d %H:%M:%S"):
    try:
        return datetime.strptime(date_str, fmt)
    except Exception:
        return datetime.max  # —á—Ç–æ–±—ã min() –Ω–µ –ª–æ–º–∞–ª–æ—Å—å, –µ—Å–ª–∏ –¥–∞—Ç–∞ –ø—É—Å—Ç–∞—è/–Ω–µ–≤–µ—Ä–Ω–∞—è

def show_top_users(bot, message: Message):
    users = load_users()
    chat_id = message.chat.id
    
    if not users:
        logging.info("show_top_users: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö")
        bot.send_message(chat_id, "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.")
        return

    # üëë –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π (–ø–æ score)
    top_score_user = max(users.values(), key=lambda u: u.get('score', 0), default=None)

    # üìÖ –°–∞–º—ã–π —Å—Ç–∞—Ä—ã–π (–ø–æ registration_date)
    oldest_user = min(users.values(), key=lambda u: safe_dt(u.get('registration_date', '')), default=None)

    # üïí –°–∞–º—ã–π –Ω–æ–≤—ã–π (–ø–æ registration_date)
    newest_user = max(users.values(), key=lambda u: safe_dt(u.get('registration_date', '')), default=None)

    # üß† –°–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π –Ω–∏–∫
    longest_name_user = max(users.values(), key=lambda u: len(u.get('name', '')), default=None)

    # üê£ –°–∞–º—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π –Ω–∏–∫
    shortest_name_user = min(users.values(), key=lambda u: len(u.get('name', '')), default=None)

    msg = "üèÜ *–¢–û–ü–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:*\n\n"

    if top_score_user:
        msg += f"üëë *–ê–∫—Ç–∏–≤–Ω—ã–π:* {top_score_user.get('name', '‚Äî')} ‚Äî {top_score_user.get('score', 0)} –æ—á–∫–æ–≤\n"
    else:
        logging.warning("show_top_users: –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

    if oldest_user:
        reg_date = oldest_user.get('registration_date', '‚Äî')
        msg += f"üìÖ *–°—Ç–∞—Ä–µ–π—à–∏–π:* {oldest_user.get('name', '‚Äî')} ‚Äî {reg_date}\n"
    else:
        logging.warning("show_top_users: –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–∞—Ä–µ–π—à–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

    if newest_user:
        reg_date = newest_user.get('registration_date', '‚Äî')
        msg += f"üïí *–ù–æ–≤—ã–π:* {newest_user.get('name', '‚Äî')} ‚Äî {reg_date}\n"
    else:
        logging.warning("show_top_users: –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

    if longest_name_user:
        length = len(longest_name_user.get('name', ''))
        msg += f"üß† *–î–ª–∏–Ω–Ω—ã–π –Ω–∏–∫:* {longest_name_user.get('name', '‚Äî')} ({length} —Å–∏–º–≤–æ–ª–æ–≤)\n"
    else:
        logging.warning("show_top_users: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–ª–∏–Ω–Ω—ã–º –Ω–∏–∫–æ–º")

    if shortest_name_user:
        length = len(shortest_name_user.get('name', ''))
        msg += f"üê£ *–ö–æ—Ä–æ—Ç–∫–∏–π –Ω–∏–∫:* {shortest_name_user.get('name', '‚Äî')} ({length} —Å–∏–º–≤–æ–ª–æ–≤)\n"
    else:
        logging.warning("show_top_users: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∫–æ—Ä–æ—Ç–∫–∏–º –Ω–∏–∫–æ–º")

    try:
        bot.send_message(chat_id, msg, parse_mode='Markdown')
        logging.info(f"show_top_users: —Ç–æ–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç {chat_id}")
    except Exception as e:
        logging.error(f"show_top_users: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")
