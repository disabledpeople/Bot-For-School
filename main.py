import logging
import colorlog
from telebot import *
from telebot.types import *
from datetime import datetime, timedelta

# --- –º–æ–¥—É–ª–∏ ---
from schedule import get_schedule
from holidays import schedule_holiday_notifications, send_holiday_on_command
from ex–∞ms import send_ege_schedule, send_oge_schedule
from food import send_today_food_menu
from teacher import show_teachers
from important_numbers import send_important_numbers
from dejur import handle_duty, handle_duty_week
from admin import increment_daily_stat, handle_stats, handle_del_user, cmd_get_users, handle_set_class, handle_announcement, feedback_users, save_feedback_users
from utils import load_users, register_user_with_date_if_new
from anon_feedback import anon_feedback_users, save_anon_feedback_users
from user_profile import show_profile, handle_change_name, handle_change_class, handle_change_avatar, add_score,show_top_users

# --- –∫–æ–Ω—Ñ–∏–≥ ---
from conf import TG_BOT_TOKEN, log_colors, ADMIN_ID

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ ---
formatter = colorlog.ColoredFormatter(
    '%(log_color)s%(asctime)s - %(levelname)s - %(message)s',
    log_colors=log_colors)
handler = logging.StreamHandler()
handler.setFormatter(formatter)
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('homework_bot.log', encoding='utf-8'),
        handler
    ])

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ ---
bot = TeleBot(TG_BOT_TOKEN)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ---
@bot.message_handler(commands=['start'])
def start_command(message):
    logging.info("–ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}".format(message.from_user.id))

    chat_id = str(message.chat.id)
    users = load_users()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –µ—Å—Ç—å –ª–∏ —É –Ω–µ–≥–æ –∫–ª–∞—Å—Å
    if chat_id in users:
        user_class = users[chat_id].get('class')
        if user_class:
            bot.send_message(chat_id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ –∫–ª–∞—Å—Å: {user_class}.")
            show_navigation_buttons(chat_id)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            return  # –í—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –∫–ª–∞—Å—Å —É–∂–µ –≤—ã–±—Ä–∞–Ω
    else:
        users[chat_id] = {}  # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {chat_id}")
    bot.send_chat_action(message.chat.id, 'typing')
    bot.send_message(chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:")

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item8 = types.KeyboardButton("8")
    item9 = types.KeyboardButton("9")
    item10 = types.KeyboardButton("10")
    item11 = types.KeyboardButton("11")
    markup.add(item8, item9, item10, item11)
    bot.send_chat_action(message.chat.id, 'typing')
    bot.send_message(chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in ["8", "9", "10", "11"])
def class_selection(message):
    selected_class = message.text
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª –∫–ª–∞—Å—Å {selected_class}")

    chat_id = str(message.chat.id)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞—Å—Å –∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    register_user_with_date_if_new(chat_id, selected_class)

    bot.send_chat_action(message.chat.id, 'typing')
    bot.send_message(chat_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–ª–∞—Å—Å: {selected_class}")
    show_navigation_buttons(chat_id)


# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ ---
def show_navigation_buttons(chat_id):
    logging.debug(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {chat_id}")
    commands_markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    commands_markup.add(
        'üèñ –ö–∞–Ω–∏–∫—É–ª—ã',
        'üçΩÔ∏è –ß—Ç–æ –¥–∞—é—Ç?',
        'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –û–ì–≠',
        'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ï–ì–≠',
        'üìÖ –°–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
        'üìÖ –ó–∞–≤—Ç—Ä–∞—à–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
        'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é',
        'üë©‚Äçüè´ –ü–æ–∫–∞–∑–∞—Ç—å —É—á–∏—Ç–µ–ª–µ–π',
        'üìù –î–µ–∂—É—Ä–Ω—ãe —Å–µ–≥–æ–¥–Ω—è',
        'üìù –î–µ–∂—É—Ä–Ω—ã–µ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é',
        'üì¢ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å',
        'üì¢ –ê–Ω–æ–Ω–∏–º–Ω–∞—è –∂–∞–ª–æ–±–∞',
        'üë§ –ü—Ä–æ—Ñ–∏–ª—å',
        'üèÜ –¢–û–ü–´'
    )

    users = load_users()
    if chat_id in users and users[chat_id].get('class') == '10':
        commands_markup.add(
            'üìû –í–∞–∂–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è 10)',
        )

    bot.send_message(chat_id, "–í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:", reply_markup=commands_markup)
    logging.debug("–ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")

# --- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é ---
@bot.message_handler(func=lambda message: message.text in ['üìÖ –°–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'üìÖ –ó–∞–≤—Ç—Ä–∞—à–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é'])
def handle_schedule_request(message):
    chat_id = str(message.chat.id)
    today = datetime.now().strftime('%A').lower()
    logging.info(f"–ó–∞–ø—Ä–æ—Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –Ω–∞ –¥–µ–Ω—å {today}")

    def normalize_day(day_name):
        # –µ—Å–ª–∏ –≤—ã—Ö–æ–¥–Ω–æ–π ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å –¥–µ–Ω—å —Å—Ä–∞–∑—É
        if day_name in ['saturday', 'sunday']:
            return None
        return day_name

    if message.text == 'üìÖ –°–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
        day_to_get = normalize_day(today)
        if day_to_get is None:
            bot.send_message(chat_id, "–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π. –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π —É—á–µ–±–Ω—ã–π –¥–µ–Ω—å (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫):")
            day_to_get = 'monday'
        schedule = get_schedule(chat_id, day_to_get)
        bot.send_chat_action(message.chat.id, 'typing')
        bot.send_message(chat_id, schedule)

    elif message.text == 'üìÖ –ó–∞–≤—Ç—Ä–∞—à–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
        tomorrow = (datetime.now() + timedelta(days=1)).strftime('%A').lower()
        day_to_get = normalize_day(tomorrow)
        if day_to_get is None:
            bot.send_message(chat_id, "–ó–∞–≤—Ç—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–π. –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π —É—á–µ–±–Ω—ã–π –¥–µ–Ω—å (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫):")
            day_to_get = 'monday'
        schedule = get_schedule(chat_id, day_to_get)
        bot.send_chat_action(message.chat.id, 'typing')
        bot.send_message(chat_id, schedule)

    elif message.text == 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é':
        days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday']
        week_schedule = []
        for day in days:
            schedule = get_schedule(chat_id, day)
            week_schedule.append(f"{day.capitalize()}:\n{schedule}")
        bot.send_chat_action(message.chat.id, 'typing')
        bot.send_message(chat_id, "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n" + "\n\n".join(week_schedule))

@bot.message_handler(func=lambda message: message.text == 'üìÖ –°–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
def handle_schedule(message):
    increment_daily_stat('schedule_today_requests')
    add_score(str(message.from_user.id))
    handle_schedule_request(bot, message)

@bot.message_handler(func=lambda message: message.text == 'üìÖ –ó–∞–≤—Ç—Ä–∞—à–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
def handle_schedule(message):
    increment_daily_stat('schedule_tomorrow_requests')
    add_score(str(message.from_user.id))
    handle_schedule_request(bot, message)

@bot.message_handler(func=lambda message: message.text == 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é')
def handle_schedule(message):
    increment_daily_stat('schedule_week_requests')
    add_score(str(message.from_user.id))
    handle_schedule_request(bot, message)

@bot.message_handler(func=lambda message: message.text == 'üèñ –ö–∞–Ω–∏–∫—É–ª—ã')
def handle_holiday(message):
    increment_daily_stat('holiday_requests')
    add_score(str(message.from_user.id))
    send_holiday_on_command(bot, message)

@bot.message_handler(func=lambda message: message.text == 'üçΩÔ∏è –ß—Ç–æ –¥–∞—é—Ç?')
def handle_food(message):
    increment_daily_stat('food_requests')
    add_score(str(message.from_user.id))
    send_today_food_menu(bot, message)

@bot.message_handler(func=lambda message: message.text == 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ï–ì–≠')
def handle_ege(message):
    increment_daily_stat('ege_schedule_requests')
    add_score(str(message.from_user.id))
    send_ege_schedule(bot, message)

@bot.message_handler(func=lambda message: message.text == 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –û–ì–≠')
def handle_oge(message):
    increment_daily_stat('oge_schedule_requests')
    add_score(str(message.from_user.id))
    send_oge_schedule(bot, message)

@bot.message_handler(func=lambda message: message.text == 'üë©‚Äçüè´ –ü–æ–∫–∞–∑–∞—Ç—å —É—á–∏—Ç–µ–ª–µ–π')
def handle_teachers(message):
    increment_daily_stat('teachers_requests')
    add_score(str(message.from_user.id))
    show_teachers(bot, message)

@bot.message_handler(func=lambda message: message.text == 'üìû –í–∞–∂–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è 10)')
def handle_important(message):
    increment_daily_stat('important_numbers_requests')
    add_score(str(message.from_user.id))
    send_important_numbers(bot, message)

@bot.message_handler(func=lambda message: message.text == 'üìù –î–µ–∂—É—Ä–Ω—ãe —Å–µ–≥–æ–¥–Ω—è')
def handle_dute(message):
    increment_daily_stat('duty_requests')
    add_score(str(message.from_user.id))
    handle_duty(bot, message)

@bot.message_handler(func=lambda message: message.text == 'üìù –î–µ–∂—É—Ä–Ω—ã–µ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é')
def handle_dute(message):
    increment_daily_stat('duty_week_requests')
    add_score(str(message.from_user.id))
    handle_duty_week(bot, message)

@bot.message_handler(commands=['stats'])
def admin_stats(message):
    if message.from_user.id not in ADMIN_ID:
        bot.send_message(message.chat.id, "‚ùå —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    logging.info(f"–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    handle_stats(bot, message)


@bot.message_handler(commands=['users'])
def admin_get_users(message):
    if message.from_user.id not in ADMIN_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—É.")
        return
    logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /get_users –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    cmd_get_users(bot, message)

@bot.message_handler(commands=['set_class'])
def admin_class(message):
    if message.from_user.id not in ADMIN_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /set_class –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    handle_set_class(bot, message)

@bot.message_handler(commands=['del_user'])
def admin_user(message):
    if message.from_user.id not in ADMIN_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /del_user –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    handle_del_user(bot, message)

@bot.message_handler(commands=['new'])
def new_command(message):
    handle_announcement(bot, message, ADMIN_ID)

@bot.message_handler(func=lambda m: m.text == "üì¢ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
def start_feedback(message):
    user_id = message.from_user.id
    if user_id in feedback_users:
        bot.send_message(user_id, "–≤—ã —É–∂–µ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏. –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞.", 
                         reply_markup=feedback_cancel_keyboard())
    else:
        feedback_users.add(user_id)
        save_feedback_users(feedback_users)
        increment_daily_stat('feedback')
        add_score(str(message.from_user.id))
        bot.send_message(user_id, "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å ‚Äî –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞.",
                         reply_markup=feedback_cancel_keyboard())
        

@bot.message_handler(func=lambda m: m.text == "‚ùå –û—Ç–º–µ–Ω–∞")
def cancel_feedback(message):
    user_id = message.from_user.id
    if user_id in feedback_users:
        feedback_users.remove(user_id)
        save_feedback_users(feedback_users)
        bot.send_message(user_id, "–æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.", show_navigation_buttons(user_id))
    else:
        bot.send_message(user_id, "–≤—ã –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.", show_navigation_buttons(user_id))

def feedback_cancel_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    return kb

def anon_feedback_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    return kb

@bot.message_handler(func=lambda m: m.text == "üì¢ –ê–Ω–æ–Ω–∏–º–Ω–∞—è –∂–∞–ª–æ–±–∞")
def anon_feedback_start(message):
    user_id = message.from_user.id
    if user_id in anon_feedback_users:
        bot.send_message(user_id, "–≤—ã —É–∂–µ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–π –∂–∞–ª–æ–±—ã. –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∞¬ª.", reply_markup=anon_feedback_kb())
    else:
        anon_feedback_users.add(user_id)
        save_anon_feedback_users(anon_feedback_users)
        increment_daily_stat('anon_feedback')
        add_score(str(message.from_user.id))
        bot.send_message(user_id, "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∂–∞–ª–æ–±–æ–π –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º.", reply_markup=anon_feedback_kb())



@bot.message_handler(func=lambda m: m.text == "‚ùå –û—Ç–º–µ–Ω–∞")
def anon_feedback_cancel(message):
    user_id = message.from_user.id
    if user_id in anon_feedback_users:
        anon_feedback_users.remove(user_id)
        save_anon_feedback_users(anon_feedback_users)
        bot.send_message(user_id, "–≤—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É –∞–Ω–æ–Ω–∏–º–Ω–æ–π –∂–∞–ª–æ–±—ã.", show_navigation_buttons(user_id))
    else:
        bot.send_message(user_id, "–≤—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–π –∂–∞–ª–æ–±—ã.", reply_markup=ReplyKeyboardRemove())

@bot.message_handler(func=lambda m: m.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
def profile_cmd(message):
    increment_daily_stat('profile')
    add_score(str(message.from_user.id))
    show_profile(bot, message)

@bot.message_handler(func=lambda m: m.text == "‚úèÔ∏è –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è")
def change_name(message):
    handle_change_name(bot, message)

@bot.message_handler(func=lambda m: m.text == "üè∑ –∏–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å")
def change_class(message):
    handle_change_class(bot, message)

@bot.message_handler(func=lambda m: m.text == "üåü –∏–∑–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä")
def change_avatar(message):
    handle_change_avatar(bot, message)

@bot.message_handler(func=lambda m: m.text == "‚ùå –ù–∞–∑–∞–¥")
def vglm(message):
    user_id = message.from_user.id
    show_navigation_buttons(user_id)

@bot.message_handler(func=lambda m: m.text == "üèÜ –¢–û–ü–´")
def otptops(message):
    increment_daily_stat('tops')
    add_score(str(message.from_user.id))
    show_top_users(bot, message)

# –≤ –∫—Ä–∞—Ü–∏–∏ –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å —ç—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ 
MAX_RETRIES = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
retry_count = 0
        
# –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏ –∏ –±–æ—Ç –ø—É–ª–∏–Ω–≥ 
if __name__ == "__main__":
    logging.info("–ó–∞–ø—É—Å–∫ –¥–æ–º–∞—à–Ω–µ–≥–æ –±–æ—Ç–∞...")

    try:
        from apscheduler.schedulers.background import BackgroundScheduler
        from dejur import setup_scheduler
        scheduler = setup_scheduler(bot)
        logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

    try:
        logging.info("–ó–∞–ø—É—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–∞–Ω–∏–∫—É–ª–∞—Ö...")
        import threading

        holiday_thread = threading.Thread(target=schedule_holiday_notifications, args=(bot,))
        holiday_thread.start()
        logging.info("–ü–æ—Ç–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–∞–Ω–∏–∫—É–ª–∞—Ö –∑–∞–ø—É—â–µ–Ω.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ—Ç–æ–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

    try:
        logging.info("–ó–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞ –±–æ—Ç–∞...")
        while retry_count < MAX_RETRIES:
            try:
                bot.polling(none_stop=True)
                retry_count = 0
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–æ—Å–µ –±–æ—Ç–∞: {e}")
                retry_count += 1
                if retry_count < MAX_RETRIES:
                    logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –æ–ø—Ä–æ—Å–∞ –±–æ—Ç–∞... (–ø–æ–ø—ã—Ç–∫–∞ {retry_count})")
                    time.sleep(5)
                else:
                    logging.error("–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞.")
    except KeyboardInterrupt:
        logging.info("–û–ø—Ä–æ—Å –±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")

